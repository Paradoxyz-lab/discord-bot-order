import os
import discord
from discord.ui import Button
from core.registration import handle_join, handle_leave
from core.utils import (
    load_data,
    save_data,
    update_registration_message,
    get_mention,
    set_mention,
    get_priority_and_role
)
from babel.dates import format_datetime
from babel import Locale
from datetime import datetime
import os

class RegisterView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)  
        self.add_item(JoinButton())
        self.add_item(JoinExtraButton())
        self.add_item(LeaveButton())
        self.add_item(CloseButton())
        self.add_item(AdminPanelButton())


class AdminButton(discord.ui.Button):
    def __init__(self):
        super().__init__(label="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", style=discord.ButtonStyle.primary, custom_id="join_main")  

    async def callback(self, interaction):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–±–æ—Ä–æ–º.", ephemeral=True)
            return

        await interaction.response.send_message("üõ† –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", view=AdminView(), ephemeral=True)

class JoinButton(discord.ui.Button):
    def __init__(self):
        super().__init__(label="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", style=discord.ButtonStyle.primary, custom_id="join_main")

    async def callback(self, interaction):
        from core.utils import (
            load_data, save_data, update_registration_message, get_priority_and_role
        )

        data = load_data()
        uid = str(interaction.user.id)


        data["main_list"] = [i for i in data["main_list"] if i != uid]
        data["extra_list"] = [i for i in data["extra_list"] if i != uid]

        max_main = data.get("max_main", 0)

        if len(data["main_list"]) < max_main:
            data["main_list"].append(uid)
            save_data(data)
            await update_registration_message(interaction.client, interaction.guild, interaction.user)
            await interaction.response.send_message("‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫.", ephemeral=True, delete_after=5)
            return


        guild = interaction.guild
        user_priority, _ = get_priority_and_role(interaction.user)

        weakest_member = None
        weakest_priority = 999

        for i in data["main_list"]:
            try:
                member = await guild.fetch_member(int(i))
                prio, _ = get_priority_and_role(member)
                if prio < weakest_priority:
                    weakest_priority = prio
                    weakest_member = i
            except:
                continue

        if weakest_member and user_priority > weakest_priority:

            data["main_list"].remove(weakest_member)
            data["extra_list"].append(weakest_member)  
            data["main_list"].append(uid)

            save_data(data)
            await update_registration_message(interaction.client, interaction.guild, interaction.user)

            await interaction.response.send_message("üîÅ –í—ã –∑–∞–º–µ–Ω–∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –º–µ–Ω—å—à–∏–º —É—Ä–æ–≤–Ω–µ–º. –û–Ω –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ –¥–æ–ø.—Å–ª–æ—Ç.", ephemeral=True, delete_after=5)
        else:
            await interaction.response.send_message("‚ùå –û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω. –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –∑–∞–º–µ–Ω—ã.", ephemeral=True, delete_after=5)



class JoinExtraButton(discord.ui.Button):
    def __init__(self):
        super().__init__(label="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –≤ –¥–æ–ø.—Å–ª–æ—Ç", style=discord.ButtonStyle.secondary, custom_id="join_extra")

    async def callback(self, interaction):
        from core.utils import load_data, save_data, update_registration_message

        data = load_data()
        uid = str(interaction.user.id)


        data["main_list"] = [i for i in data["main_list"] if i != uid]
        data["extra_list"] = [i for i in data["extra_list"] if i != uid]

        data["extra_list"].append(uid)
        save_data(data)
        await update_registration_message(interaction.client, interaction.guild, interaction.user)
        await interaction.response.send_message("üìò –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –¥–æ–ø.—Å–ª–æ—Ç.", ephemeral=True, delete_after=5)


class LeaveButton(discord.ui.Button):
    def __init__(self):
        super().__init__(label="–í—ã–π—Ç–∏", style=discord.ButtonStyle.danger, custom_id="leave")

    async def callback(self, interaction):
        from core.utils import load_data, save_data, update_registration_message
        data = load_data()
        uid = str(interaction.user.id)
        before = len(data["main_list"]) + len(data["extra_list"])

        data["main_list"] = [i for i in data["main_list"] if i != uid]
        data["extra_list"] = [i for i in data["extra_list"] if i != uid]
        after = len(data["main_list"]) + len(data["extra_list"])

        if before == after:
            await interaction.response.send_message("–í—ã –∏ —Ç–∞–∫ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ.", ephemeral=True, delete_after=5)
            return

        save_data(data)
        await update_registration_message(interaction.client, interaction.guild, interaction.user)
        await interaction.response.send_message("üö™ –í—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–æ–≤.", ephemeral=True, delete_after=5)


class CloseButton(discord.ui.Button):
    def __init__(self):
        super().__init__(label="–ó–∞–∫—Ä—ã—Ç—å", style=discord.ButtonStyle.danger, custom_id="close")

    async def callback(self, interaction):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä.", ephemeral=True,delete_after=5)
            return
        try:
            await interaction.message.delete()
        except:
            await interaction.response.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", ephemeral=True, delete_after=5)

class AdminPanelButton(discord.ui.Button):
    def __init__(self):
        super().__init__(label="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", style=discord.ButtonStyle.secondary, custom_id="admin_panel")

    async def callback(self, interaction):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.", ephemeral=True)
            return

        await interaction.response.send_message("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", view=AdminView(), ephemeral=True)


class AdminView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(ClearButton())
        self.add_item(FinishButton())
        self.add_item(AnnounceButton())
        self.add_item(ExportButton())
        self.add_item(MentionSelect())

class ClearButton(discord.ui.Button):
    def __init__(self):
        super().__init__(label="–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", style=discord.ButtonStyle.danger, custom_id="admin_clear")

    async def callback(self, interaction):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message(
                "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ—á–∏—â–∞—Ç—å —Å–ø–∏—Å–æ–∫.", ephemeral=True, delete_after=5
            )
            return

        from core.utils import load_data, save_data, update_registration_message, get_mention
        from main import bot

        old_data = load_data()
        data = {
            "main_list": [],
            "extra_list": [],
            "max_main": old_data.get("max_main", 32),
            "title": old_data.get("title", "–°–±–æ—Ä"),
            "date": old_data.get("date", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"),
            "message_id": old_data.get("message_id"),
            "mention_mode": get_mention()
        }
        save_data(data)

        await update_registration_message(bot, interaction.guild, interaction.user)

        # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        await interaction.message.edit(view=None)

        await interaction.response.send_message("‚úÖ –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω!", ephemeral=True, delete_after=5)


class FinishButton(discord.ui.Button):
    def __init__(self):
        super().__init__(label="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä", style=discord.ButtonStyle.secondary, custom_id="admin_finish")

    async def callback(self, interaction):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä.", ephemeral=True, delete_after=5)
            return

        from core.utils import load_data, build_registration_embed
        from datetime import datetime
        from babel.dates import format_datetime
        from babel import Locale
        import os

        data = load_data()
        message_id = data.get("message_id")
        channel_id = int(os.getenv("STATUS_CHANNEL_ID", 0))

        channel = interaction.guild.get_channel(channel_id)
        if not channel or not message_id:
            await interaction.response.send_message("‚ùå –ö–∞–Ω–∞–ª –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", ephemeral=True, delete_after=5)
            return

        try:
            message = await channel.fetch_message(message_id)
            embed = await build_registration_embed(interaction.guild, interaction.user, finished=True)
            await message.edit(embed=embed, view=None)

            now = datetime.now()
            locale = Locale("ru")
            localized_date = format_datetime(now, "EEEE, d MMMM y '–≥.' –≤ HH:mm", locale=locale)
            localized_date = localized_date[0].upper() + localized_date[1:]

            text = f"**–ù–∞–±–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω!**\n**–î–∞—Ç–∞:** {localized_date}"
            await channel.send(text, delete_after=10)

            await interaction.message.edit(view=None)
            await interaction.response.send_message("‚úÖ –°–±–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", ephemeral=True, delete_after=5)

        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–±–æ—Ä–∞:", e)
            await interaction.response.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä.", ephemeral=True, delete_after=5)

class AnnounceButton(discord.ui.Button):
    def __init__(self):
        super().__init__(label="–°–¥–µ–ª–∞—Ç—å –∞–Ω–æ–Ω—Å", style=discord.ButtonStyle.success, custom_id="admin_announce")

    async def callback(self, interaction):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–Ω–æ–Ω—Å—ã.", ephemeral=True, delete_after=5)
            return

        from core.utils import load_data, get_mention
        data = load_data()

        title = data.get("title", "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
        date = data.get("date", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        max_main = data.get("max_main", 0)
        mention = get_mention()
        preview = mention if mention else "–±–µ–∑ —Ç–µ–≥–∞"

        embed = discord.Embed(
            title="üì¢ –ù–æ–≤—ã–π —Å–±–æ—Ä –æ—Ç–∫—Ä—ã—Ç!",
            description=f"**{title}**\nüóì –î–∞—Ç–∞: **{date}**\nüë• –ú–µ—Å—Ç: **{max_main}**",
            color=0x57F287
        )
        embed.add_field(name="–ü–∏–Ω–≥ –ø—Ä–∏ –∞–Ω–æ–Ω—Å–µ", value=preview, inline=False)
        embed.set_footer(text="–ù–∞–∂–º–∏—Ç–µ /—Å–±–æ—Ä —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")

        await interaction.channel.send(embed=embed, content=mention if mention else None)
        await interaction.message.edit(view=None)
        await interaction.response.send_message("‚úÖ –ê–Ω–æ–Ω—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", ephemeral=True, delete_after=5)


class ExportButton(discord.ui.Button):
    def __init__(self):
        super().__init__(label="üìÑ –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞", style=discord.ButtonStyle.secondary, custom_id="admin_export")

    async def callback(self, interaction):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫.", ephemeral=True, delete_after=5)
            return

        from core.utils import load_data, get_priority_and_role
        data = load_data()
        main_ids = data["main_list"]

        lines = []
        guild = interaction.guild
        for uid in main_ids:
            try:
                member = await guild.fetch_member(int(uid))
                priority, role = get_priority_and_role(member)
                lines.append((priority, f"{member.name}#{member.discriminator} ‚Äî {role}"))
            except:
                continue

        lines.sort(key=lambda x: -x[0])
        content = "\n".join([line for _, line in lines]) or "—Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç"

        with open("export.txt", "w", encoding="utf-8") as f:
            f.write(content)

        file = discord.File("export.txt", filename="—Å–ø–∏—Å–æ–∫_—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.txt")
        await interaction.message.edit(view=None)
        await interaction.response.send_message("üìé –í–æ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫:", file=file, ephemeral=True)

class MentionSelect(discord.ui.Select):
    def __init__(self):
        options = [
            discord.SelectOption(label="@everyone", value="@everyone"),
            discord.SelectOption(label="@here", value="@here"),
            discord.SelectOption(label="@—Ä–æ–ª—å", value="role"),
            discord.SelectOption(label="–ë–µ–∑ —Ç–µ–≥–∞", value="none")
        ]
        super().__init__(placeholder="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–≥ –¥–ª—è –∞–Ω–æ–Ω—Å–∞", options=options, custom_id="join_main")  

    async def callback(self, interaction: discord.Interaction):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message(
                "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", ephemeral=True, delete_after=5
            )
            return

        from core.utils import set_mention
        value = self.values[0]
        set_mention(value)

        # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        await interaction.message.edit(view=None)

        if value == "role":
            await interaction.response.send_message(
                "üß© –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ä–æ–ª—å –¥–ª—è —Ç–µ–≥–∞:", view=RoleSelectorView(), ephemeral=True
            )
        else:
            label = "–Ω–∏–∫–æ–≥–æ" if value == "none" else value
            await interaction.response.send_message(
                f"‚úÖ –¢–µ–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: **{label}**", ephemeral=True, delete_after=5
            )

class RoleSelector(discord.ui.Select):
    def __init__(self, roles):
        options = [
            discord.SelectOption(label=role.name, value=str(role.id))
            for role in roles if not role.is_bot_managed()
        ]
        super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å...", options=options, custom_id="join_main")

    async def callback(self, interaction: discord.Interaction):
        from core.utils import set_mention_role
        role_id = int(self.values[0])
        set_mention_role(role_id)
        await interaction.response.send_message(f"‚úÖ –ë—É–¥–µ—Ç —Ç–µ–≥–∞—Ç—å—Å—è —Ä–æ–ª—å: <@&{role_id}>", ephemeral=True, delete_after=5)

class RoleSelectorView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=60)
        from main import bot
        guild = bot.guilds[0]
        roles = [role for role in guild.roles if role.name != "@everyone"]
        self.add_item(RoleSelector(roles))